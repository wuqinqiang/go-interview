<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开篇 on grpc-shop</title>
    <link>https://go.aabbccm.com/docs/main/</link>
    <description>Recent content in 开篇 on grpc-shop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://go.aabbccm.com/docs/main/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微信</title>
      <link>https://go.aabbccm.com/docs/main/wechat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go.aabbccm.com/docs/main/wechat/</guid>
      <description>联系方式 #  陶冶情操的地方 #  作者微信 #  作者女朋友 #  待定中。。。。。。</description>
    </item>
    
    <item>
      <title>环境安装</title>
      <link>https://go.aabbccm.com/docs/main/env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go.aabbccm.com/docs/main/env/</guid>
      <description>开发环境 #  Go环境 #  首先是 Go ，直接安装最新的版本就好。这个很简单，官网地址:go安装。
Protocol buffer #  protocol buffer ，简称 protobuf。是一种与语言、平台无关 、可扩展的序列化结构数据格式。官方有一句话:
Protocol buffers are Google&amp;rsquo;s language-neutral, platform-neutral, extensible mechanism for serializing structured data – think XML, but smaller, faster, and simpler.  所以它的定位类似于 xml 、json，但是从性能上和效率上大幅度优于 xml、json。
但是它也有个缺点，可读性差，毕竟是以二进制方式存储的。
下载安装 protocol buffer 项目地址。
如果是 linux 使用 apt 或者 apt-get
apt install -y protobuf-compiler protoc --version # 确认版本为 3+ 如果是 Mac,使用 Homebrew,
brew install protobuf protoc --version # 确认版本为 3+ 官方建议使用 proto3 教程中使用的 proto3 ，如果想了解 proto3 相比 proto2 的改变可以查看这里[Protocol Buffers v3.</description>
    </item>
    
    <item>
      <title>初识gRPC</title>
      <link>https://go.aabbccm.com/docs/main/grpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go.aabbccm.com/docs/main/grpc/</guid>
      <description>在正式写grpc-shop之前，我们需要先花几篇文章介绍一些基础概念。 在介绍gRPC之前我们先了解下什么是RPC。
什么是rpc? #  RPC是Remote Procedure Call的简称，中文叫远程过程调用。
说的白话一点，可以这么理解：现在有两台服务器A和B。部署在A服务器上的应用，想调用部署在B服务器上的另一个应用提供的方法，由于不在一个内存空间，不能直接调用，需要通过网络来达到调用的效果。
现在我们在A服务的一个本地方法中封装调用B的逻辑，然后只需要在本地使用这个方法，就达到了调用B的效果。
对使用者来说，屏蔽了细节。你只需要知道调用这个方法返回的结果，而无需关注底层逻辑。
那，从封装的那个方法角度来看，调用B之前我们需要知道什么？
当然是一些约定啊。
 调用的语义，也可以理解为接口规范。(比如RESTful) 网络传输协议 (比如HTTP) 数据序列化反序列化规范(比如JSON)。  有了这些约定，我就知道如何给你发数据，发什么样的数据，你返回给我的又是什么样的数据。
从上图中可以看出，RPC是一种客户端-服务端（Client/Server）模式。
从某种角度来看，所有本身应用程序之外的调用都可以归类为RPC。无论是微服务、第三方HTTP接口，还是读写数据库中间件Mysql、Redis。
HTTP 和 RPC 有什么区别？ #  我之前也问个这个问题。
首先这个问题本身不太严谨。
 HTTP只是一个通信协议，工作在OSI第七层。
而RPC是一个完整的远程调用方案。它包含了:接口规范、传输协议、数据序列化反序列化规范。
这样看，RPC和 HTTP的关系只可能是包含关系。为什么是可能？因为RPC传输协议那块我可以不基于HTTP呀。
所以这个问题应该改成:基于HTTP的远程调用方案 (如:HTTP+RESTful+JSON) 和直接使用RPC远程调用方案有什么区别？
RPC 和 gRPC 有什么关系？ #  gRPC是由 google开发的一个高性能、通用的开源RPC框架，主要面向移动应用开发且基于HTTP/2协议标准而设计，同时支持大多数流行的编程语言。
gRPC基于 HTTP/2协议传输。而HTTP/2相比HTTP1.x:
用于数据传输的二进制分帧 #  HTTP/2采用二进制格式传输协议，而非HTTP/1.x的文本格式。
多路复用 #  HTTP/2支持通过同一个连接发送多个并发的请求。
而HTTP/1.x虽然通过pipeline也能并发请求，但多个请求之间的响应依然会被阻塞。
服务端推送 #  服务端推送是一种在客户端请求之前发送数据的机制。在HTTP/2中，服务器可以对客户端的一个请求发送多个响应。而不像HTTP/1.X一样，只能通过客户端发起request,服务端才产生对应的response。
减少网络流量的头部压缩。 #  HTTP/2对消息头进行了压缩传输，能够节省消息头占用的网络流量。至于如何压缩的，可以查看这篇：HPACK: Header Compression for HTTP/2
同时gRPC使用Protocol Buffers作为序列化协议。关于Protocol Buffers。官网有一句介绍：</description>
    </item>
    
    <item>
      <title>初识 protobuf</title>
      <link>https://go.aabbccm.com/docs/main/protobuf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go.aabbccm.com/docs/main/protobuf/</guid>
      <description>初始protobuf #  Protobuf 是什么 #  protobuf全称是protocal buffers ，平时我们都会简称为pb，下文就使用pb来介绍了。
官网中对pb的完整定义如下:
 Protocol buffers are Google&amp;rsquo;s language-neutral, platform-neutral, extensible mechanism for serializing structured data – think XML, but smaller, faster, and simpler. You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages.</description>
    </item>
    
    <item>
      <title>初始化项目</title>
      <link>https://go.aabbccm.com/docs/main/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go.aabbccm.com/docs/main/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE/</guid>
      <description>初始化项目 #  </description>
    </item>
    
  </channel>
</rss>
