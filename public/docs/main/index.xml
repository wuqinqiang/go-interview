<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开篇 on grpc-shop</title>
    <link>https://go.aabbccm.com/docs/main/</link>
    <description>Recent content in 开篇 on grpc-shop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://go.aabbccm.com/docs/main/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微信</title>
      <link>https://go.aabbccm.com/docs/main/wechat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go.aabbccm.com/docs/main/wechat/</guid>
      <description>联系方式 #  陶冶情操的地方 #  作者微信 #  作者女朋友 #  待定中。。。。。。</description>
    </item>
    
    <item>
      <title>环境安装</title>
      <link>https://go.aabbccm.com/docs/main/env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go.aabbccm.com/docs/main/env/</guid>
      <description>开发环境 #  Go环境 #  首先是 Go ，直接安装最新的版本就好。这个很简单，官网地址:go安装。
Protocol buffer #  protocol buffer ，简称 protobuf。是一种与语言、平台无关 、可扩展的序列化结构数据格式。官方有一句话:
Protocol buffers are Google&amp;rsquo;s language-neutral, platform-neutral, extensible mechanism for serializing structured data – think XML, but smaller, faster, and simpler.  所以它的定位类似于 xml 、json，但是从性能上和效率上大幅度优于 xml、json。
但是它也有个缺点，可读性差，毕竟是以二进制方式存储的。
下载安装 protocol buffer 项目地址。
如果是 linux 使用 apt 或者 apt-get
apt install -y protobuf-compiler protoc --version # 确认版本为 3+ 如果是 Mac,使用 Homebrew,
brew install protobuf protoc --version # 确认版本为 3+ 官方建议使用 proto3 教程中使用的 proto3 ，如果想了解 proto3 相比 proto2 的改变可以查看这里[Protocol Buffers v3.</description>
    </item>
    
    <item>
      <title>初识gRPC</title>
      <link>https://go.aabbccm.com/docs/main/grpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go.aabbccm.com/docs/main/grpc/</guid>
      <description>初始gRPC #  在聊 gRPC 之前我们先来了解下什么是 rpc。
什么是rpc? #  RPC 是 Remote Procedure Call 的简称，中文我们一般叫做远程过程调用。RPC 是一种服务器-客户端（Client/Server）模式，经典实现就是一个通过发送请求-接受回应进行信息交互的系统。
RPC 的客户端和服务端可以在一台机器上，也可以在不同的机器上，对于开发者来说，调用 RPC 服务的时候，就跟调用本地函数一样。对于开发者来说。
http 和 rpc 有什么区别？ #  首先这个问题本身不太严谨。
 http 只是一个工作在应用层的传输协议。
而 RPC 是一个完整的远程调用方案。
它包含了:
 接口规范 数据序列化规范 传输协议  这样看，RPC 和 http 的关系只可能是包含关系。为什么是可能？因为 RPC 传输协议那块我可以不基于 http 呀。
这个问题应该改成:基于 http 的远程调用方案 (如:http +RestFul(接口规范)+json(数据序列化规范)) 和直接使用 rpc 远程调用方案有什么区别？
RPC 和 gRPC 有什么关系？ #  gRPC 是由 google 发起的一个 RPC 框架，基于 HTTP/2 协议传输。使用 Protocol Buffers 作为序列化协议。关于 Protocol Buffers 是一种与语言、平台无关 、可扩展的序列化结构数据格式。类似 JSON、XML等数据描述语言。更多关于 Protocol Buffers,我写了另一篇文章。</description>
    </item>
    
    <item>
      <title>初识 protobuf</title>
      <link>https://go.aabbccm.com/docs/main/protobuf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go.aabbccm.com/docs/main/protobuf/</guid>
      <description>初始gRPC #  </description>
    </item>
    
    <item>
      <title>初始化项目</title>
      <link>https://go.aabbccm.com/docs/main/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go.aabbccm.com/docs/main/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE/</guid>
      <description>初始化项目 #  </description>
    </item>
    
  </channel>
</rss>
